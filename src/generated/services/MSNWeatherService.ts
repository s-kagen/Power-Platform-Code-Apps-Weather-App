/*!
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * This file is autogenerated. Do not edit this file directly.
 */

import type { CurrentWeather } from '../models/MSNWeatherModel';
import type { IOperationResult } from '@microsoft/power-apps/data';
import type { MeasureUnits } from '../models/MSNWeatherModel';
import type { WeatherForecast } from '../models/MSNWeatherModel';
import { dataSourcesInfo } from '../../../.power/appschemas/dataSourcesInfo';
import { getClient } from '@microsoft/power-apps/data';

export class MSNWeatherService {
  private static readonly dataSourceName = 'msnweather';

  private static readonly client = getClient(dataSourcesInfo);

  /**
   * Get current weather
   * Get the current weather for a location.
   */
  public static async CurrentWeather(Location: string, units: string): Promise<IOperationResult<CurrentWeather>> {
    const params: { Location: string, units: string } = { Location, units };
    const result = await MSNWeatherService.client.executeAsync<{ Location: string, units: string }, CurrentWeather>(
      {
        connectorOperation: {
          tableName: MSNWeatherService.dataSourceName,
          operationName: 'CurrentWeather',
          parameters: params
        },
      });
    return result;
  }

  /**
   * When the current weather changes
   * Triggers a new flow when the specified weather measure changes for a location.
   */
  public static async OnCurrentWeatherChange(When: string, Target: number, units: string, Location: string, Measure: string): Promise<IOperationResult<CurrentWeather>> {
    const params: { When: string, Target: number, units: string, Location: string, Measure: string } = { When, Target, units, Location, Measure };
    const result = await MSNWeatherService.client.executeAsync<{ When: string, Target: number, units: string, Location: string, Measure: string }, CurrentWeather>(
      {
        connectorOperation: {
          tableName: MSNWeatherService.dataSourceName,
          operationName: 'OnCurrentWeatherChange',
          parameters: params
        },
      });
    return result;
  }

  /**
   * When the current conditions change
   * Triggers a new flow when the conditions change for a location.
   */
  public static async OnCurrentConditionsChange(Location: string, units: string): Promise<IOperationResult<CurrentWeather>> {
    const params: { Location: string, units: string } = { Location, units };
    const result = await MSNWeatherService.client.executeAsync<{ Location: string, units: string }, CurrentWeather>(
      {
        connectorOperation: {
          tableName: MSNWeatherService.dataSourceName,
          operationName: 'OnCurrentConditionsChange',
          parameters: params
        },
      });
    return result;
  }

  /**
   * Get forecast for today
   * Get the forecast for the current day in the specified location.
   */
  public static async TodaysForecast(Location: string, units: string): Promise<IOperationResult<WeatherForecast>> {
    const params: { Location: string, units: string } = { Location, units };
    const result = await MSNWeatherService.client.executeAsync<{ Location: string, units: string }, WeatherForecast>(
      {
        connectorOperation: {
          tableName: MSNWeatherService.dataSourceName,
          operationName: 'TodaysForecast',
          parameters: params
        },
      });
    return result;
  }

  /**
   * Get the forecast for tomorrow
   * Get the forecast for tomorrow in the specified location.
   */
  public static async TomorrowsForecast(Location: string, units: string): Promise<IOperationResult<WeatherForecast>> {
    const params: { Location: string, units: string } = { Location, units };
    const result = await MSNWeatherService.client.executeAsync<{ Location: string, units: string }, WeatherForecast>(
      {
        connectorOperation: {
          tableName: MSNWeatherService.dataSourceName,
          operationName: 'TomorrowsForecast',
          parameters: params
        },
      });
    return result;
  }

  /**
   * Get Measure Units
   * Get Measure Units
   */
  public static async GetMeasureUnits(Location: string, Measure: string): Promise<IOperationResult<MeasureUnits>> {
    const params: { Location: string, Measure: string } = { Location, Measure };
    const result = await MSNWeatherService.client.executeAsync<{ Location: string, Measure: string }, MeasureUnits>(
      {
        connectorOperation: {
          tableName: MSNWeatherService.dataSourceName,
          operationName: 'GetMeasureUnits',
          parameters: params
        },
      });
    return result;
  }
}
